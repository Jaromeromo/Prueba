@page "/secciones"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Secciones</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                        <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                            <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                        </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="() => EditarSeccionSeleccionada()">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionada</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (secciones == null || secciones.Count == 0)
            {
                <p>No hay secciones disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var seccion in secciones)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@seccionSeleccionada[seccion]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(seccion, "id")</td>
                                <td>@ObtenerValor(seccion, "nombre")</td>
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarSeccion(seccion)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#" class="delete" @onclick="() => EliminarSeccion(seccion)" @onclick:preventDefault>
                                        <i class="material-icons" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarSeccion">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar Seccion</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreSeccion" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Seccion</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ID de la Fuente</label>
                        <input type="text" class="form-control" @bind="idSeccionConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarSeccion">Buscar</button>

                    @if (seccionConsultada != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" value="@nombreSeccionConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarSeccion">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Seccion</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>ID</label>
                            <input type="text" class="form-control" @bind="idSeccionEditar" disabled>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreSeccionEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeccion">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Seccion</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar esta seccion?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Secciones Seleccionadas</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar las secciones seleccionadas?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}
@code {
    private List<Dictionary<string, object>> secciones = new();
    private Dictionary<Dictionary<string, object>, bool> seccionSeleccionada = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in seccionSeleccionada.Keys.ToList())
            {
                seccionSeleccionada[clave] = _seleccionarTodos;
            }
        }
    }

    private bool _seleccionarTodos = false;
    private bool mostrarModal = false;
    private bool mostrarModalConsulta = false;
    private bool mostrarModalEditar = false;
    private bool mostrarModalEliminar = false;
    private bool mostrarModalEliminarMultiples = false;
    private string nombreSeccion = "";
    private string idSeccionConsulta = "";
    private Dictionary<string, object>? seccionConsultada = null;
    private string nombreSeccionConsulta = "";
    private Dictionary<string, object>? seccionParaEditar = null;
    private string idSeccionEditar = "";
    private string nombreSeccionEditar = "";
    private Dictionary<string, object>? seccionParaEliminar = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarSecciones();
    }

    private async Task CargarSecciones()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "seccion");
            secciones = resultado ?? new();
            seccionSeleccionada = secciones.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar secciones: {ex.Message}";
            secciones = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private void AbrirModal()
    {
        mostrarModal = true;
        nombreSeccion = "";
        StateHasChanged();
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        StateHasChanged();
    }

    private async Task GuardarSeccion()
    {
        if (string.IsNullOrEmpty(nombreSeccion))
        {
            errorMensaje = "El nombre de la sección es obligatorio.";
            return;
        }

        var nuevaSeccion = new Dictionary<string, object> { { "nombre", nombreSeccion } };

        bool resultado = await servicioEntidad.CrearAsync("proyecto", "seccion", nuevaSeccion);

        if (resultado)
        {
            secciones.Add(nuevaSeccion);
            seccionSeleccionada[nuevaSeccion] = false;
            CerrarModal();
        }
        else
        {
            errorMensaje = "Error al guardar la sección en la base de datos.";
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }

    private void EditarSeccion(Dictionary<string, object> seccion)
    {
        seccionParaEditar = seccion; // Usar la referencia en lugar de clonar
        idSeccionEditar = ObtenerValor(seccion, "id");
        nombreSeccionEditar = ObtenerValor(seccion, "nombre");
        mostrarModalEditar = true;
        StateHasChanged();
    }

private async Task ActualizarSeccion()
{
    if (seccionParaEditar == null || string.IsNullOrEmpty(nombreSeccionEditar))
    {
        errorMensaje = "El nombre de la sección es obligatorio.";
        return;
    }

    seccionParaEditar["nombre"] = nombreSeccionEditar; // Modificar el diccionario original

    bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto",
        "seccion",
        "id",
        idSeccionEditar,
        seccionParaEditar
    );

        if (resultado)
        {
        CerrarModalEditar();
        }
        else
        {
        errorMensaje = "Error al actualizar la sección en la base de datos.";
    }
}


    private void EditarSeccionSeleccionada()
    {
        var seleccionado = seccionSeleccionada.FirstOrDefault(x => x.Value).Key;
        if (seleccionado != null)
        {
            EditarSeccion(seleccionado);
        }
        else
        {
            errorMensaje = "Debe seleccionar una sección para editar.";
        }
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
        StateHasChanged();
    }

    private async Task ConsultarSeccion()
    {
        if (string.IsNullOrEmpty(idSeccionConsulta))
        {
            errorMensaje = "Debe ingresar un ID de sección.";
            return;
        }

        var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "seccion", "id", idSeccionConsulta);

        if (resultado != null)
        {
            seccionConsultada = resultado;
            nombreSeccionConsulta = ObtenerValor(resultado, "nombre");
        }
        else
        {
            errorMensaje = "No se encontró la sección.";
            seccionConsultada = null;
            nombreSeccionConsulta = "";
        }
    }

    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        idSeccionConsulta = "";
        seccionConsultada = null;
        nombreSeccionConsulta = "";
        StateHasChanged();
    }

    private void MostrarModalEliminar(Dictionary<string, object> seccion)
    {
        seccionParaEliminar = seccion;
        mostrarModalEliminar = true;
        StateHasChanged();
    }

    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        seccionParaEliminar = null;
        StateHasChanged();
    }

    private async Task ConfirmarEliminarSeccion()
    {
        if (seccionParaEliminar != null)
        {
            string id = ObtenerValor(seccionParaEliminar, "id");

            bool resultado = await servicioEntidad.EliminarAsync("proyecto", "seccion", "id", id);

            if (resultado)
            {
                secciones.Remove(seccionParaEliminar);
                seccionSeleccionada.Remove(seccionParaEliminar);
            }
            else
            {
                errorMensaje = "Error al eliminar la sección.";
            }

            CerrarModalEliminar();
        }
    }

    private async Task EliminarSeccion(Dictionary<string, object> seccion)
    {
        MostrarModalEliminar(seccion);
    }

    private void MostrarModalEliminarMultiples()
    {
        var haySeleccionados = seccionSeleccionada.Any(x => x.Value);
        if (!haySeleccionados)
        {
            errorMensaje = "Debe seleccionar al menos una sección para eliminar.";
            return;
        }

        mostrarModalEliminarMultiples = true;
        StateHasChanged();
    }

    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
        StateHasChanged();
    }

    private async Task ConfirmarEliminarSeleccionados()
    {
        var seleccionados = seccionSeleccionada.Where(x => x.Value).Select(x => x.Key).ToList();

        foreach (var seccion in seleccionados)
        {
            string id = ObtenerValor(seccion, "id");
            bool resultado = await servicioEntidad.EliminarAsync("proyecto", "seccion", "id", id);

            if (resultado)
            {
                secciones.Remove(seccion);
                seccionSeleccionada.Remove(seccion);
            }
        }

        seleccionarTodos = false;
        CerrarModalEliminarMultiples();
    }
}
