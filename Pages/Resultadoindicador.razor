@page "/ResultadoIndicador"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Resultados de Indicadores</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                        <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                            <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                        </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModalGuardar">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="EditarResultadoSeleccionado">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionado</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (resultados == null || resultados.Count == 0)
            {
                <p>No hay Resultados de Indicadores disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>ID</th>
                            <th>Resultado</th>
                            <th>Fecha Cálculo</th>
                            <th>ID Indicador</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var resultado in resultados)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@resultadosSeleccionados[resultado]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(resultado, "id")</td>
                                <td>@ObtenerValor(resultado, "resultado")</td>
                                <td>@ObtenerFechaFormateada(resultado, "fechacalculo")</td>
                                <td>@ObtenerValor(resultado, "fkidindicador")</td>
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarResultado(resultado)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#" class="delete" @onclick="() => EliminarResultado(resultado)"
                                        @onclick:preventDefault>
                                        <i class="material-icons" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModalGuardar)
{
   <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <form @onsubmit="GuardarResultado">
                <div class="modal-header">
                    <h4 class="modal-title">Agregar Resultado de Indicador</h4>
                    <button type="button" class="close" @onclick="CerrarModalGuardar">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Resultado</label>
                        <input type="number" step="0.01" class="form-control" @bind="valorResultado" required>
                    </div>
                    <div class="form-group">
                        <label>Fecha Cálculo</label>
                        <input type="datetime-local" class="form-control" @bind="fechaCalculo" required>
                    </div>
                    <div class="form-group">
                        <label>ID Indicador</label>
                        <input type="number" class="form-control" @bind="idIndicador" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalGuardar">Cancelar</button>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Resultado de Indicador</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ID Resultado</label>
                        <input type="number" class="form-control" @bind="idResultadoConsultar">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarResultado">Buscar</button>

                    @if (resultadoConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>ID</label>
                            <input type="number" class="form-control" value="@ObtenerValor(resultadoConsultado, "id")" disabled>
                        </div>
                        <div class="form-group">
                            <label>Resultado</label>
                            <input type="number" class="form-control" value="@ObtenerValor(resultadoConsultado, "resultado")" disabled>
                        </div>
                        <div class="form-group">
                            <label>Fecha Cálculo</label>
                            <input type="text" class="form-control" value="@ObtenerFechaFormateada(resultadoConsultado, "fechacalculo")" disabled>
                        </div>
                        <div class="form-group">
                            <label>ID Indicador</label>
                            <input type="number" class="form-control" value="@ObtenerValor(resultadoConsultado, "fkidindicador")" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarResultado">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Resultado de Indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Resultado</label>
                            <input type="number" step="0.01" class="form-control" @bind="resultadoEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Fecha Cálculo</label>
                            <input type="datetime-local" class="form-control" @bind="fechaCalculoEditar" required>
                        </div>
                        <div class="form-group">
                            <label>ID Indicador</label>
                            <input type="number" class="form-control" @bind="idIndicadorEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarResultado">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Resultado de Indicador</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar este registro?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Resultados Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar los registros seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                            @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@code {
    private List<Dictionary<string, object>> resultados = new();
    private Dictionary<Dictionary<string, object>, bool> resultadosSeleccionados = new();
    private bool cargando = true;
    private bool mostrarModalGuardar = false;
    private bool mostrarModalConsulta = false;
    private bool mostrarModalEditar = false;
    private bool mostrarModalEliminar = false;
    private bool mostrarModalEliminarMultiples = false;

    // Variables para los formularios
    private double valorResultado;
    private DateTime fechaCalculo = DateTime.Now;
    private double resultadoEditar;
    private DateTime fechaCalculoEditar = DateTime.Now;
    private int idIndicador;
    private int idIndicadorConsultar;
    private int idResultadoConsultar;
    private int idIndicadorEditar;
    private int idActual; // Para guardar el ID actual al editar

    private Dictionary<string, object> resultadoAEliminar;
    private Dictionary<string, object> resultadoConsultado;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var resultado in resultados)
            {
                resultadosSeleccionados[resultado] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarRelaciones();
    }

    private async Task CargarRelaciones()
    {
        cargando = true;
        try
        {
            resultados = await servicioEntidad.ObtenerTodosAsync("proyecto", "resultadoindicador") ?? new();
            resultadosSeleccionados = resultados.ToDictionary(r => r, r => false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar resultados: {ex.Message}");
            resultados = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }

    private string ObtenerFechaFormateada(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario.TryGetValue(clave, out var valor) && valor != null)
        {
            if (DateTime.TryParse(valor.ToString(), out DateTime fecha))
            {
                return fecha.ToString("dd/MM/yyyy HH:mm:ss");
            }
        }
        return "";
    }

    private void AbrirModalGuardar()
    {
        mostrarModalGuardar = true;
        idIndicador = 0;
        valorResultado = 0;
        fechaCalculo = DateTime.Now;
    }

    private void CerrarModalGuardar()
    {
        mostrarModalGuardar = false;
    }

    private async Task GuardarResultado()
    {
        try
        {
            // Crear un nuevo resultado con los campos según la estructura de la tabla
            var nuevoResultado = new Dictionary<string, object>
            {
                { "resultado", valorResultado },
                { "fechacalculo", fechaCalculo },
                { "fkidindicador", idIndicador }
            };

            var resultado = await servicioEntidad.CrearAsync("proyecto", "resultadoindicador", nuevoResultado);

            if (resultado)
            {
                await CargarRelaciones();
                CerrarModalGuardar();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar resultado: {ex.Message}");
        }
    }

    private async Task ConsultarResultado()
    {
        try
        {
            // Primero buscar por id
            var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "resultadoindicador", "id", idResultadoConsultar.ToString());
            
            if (resultado != null)
            {
                resultadoConsultado = resultado;
            }
            else
            {
                // Si no se encuentra por id, intentar buscar por fkidindicador
                resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "resultadoindicador", "fkidindicador", idIndicadorConsultar.ToString());
                resultadoConsultado = resultado;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar resultado: {ex.Message}");
            resultadoConsultado = null;
        }
    }

    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        idIndicadorConsultar = 0;
        idResultadoConsultar = 0;
        resultadoConsultado = null;
    }

    private void EditarResultado(Dictionary<string, object> resultado)
    {
        // Guardar el ID actual para la actualización
        if (int.TryParse(ObtenerValor(resultado, "id"), out int id))
        {
            idActual = id;
        }

        // Obtener el ID del indicador
        if (int.TryParse(ObtenerValor(resultado, "fkidindicador"), out int idInd))
        {
            idIndicadorEditar = idInd;
        }
        
        // Obtener el valor del resultado
        if (double.TryParse(ObtenerValor(resultado, "resultado"), out double valor))
        {
            resultadoEditar = valor;
        }
        
        // Obtener la fecha de cálculo
        if (DateTime.TryParse(ObtenerValor(resultado, "fechacalculo"), out DateTime fechaCalc))
        {
            fechaCalculoEditar = fechaCalc;
        }
        else
        {
            fechaCalculoEditar = DateTime.Now;
        }

        mostrarModalEditar = true;
    }

    private void EditarResultadoSeleccionado()
    {
        var resultadoSeleccionado = resultadosSeleccionados.FirstOrDefault(r => r.Value).Key;
        if (resultadoSeleccionado != null)
        {
            EditarResultado(resultadoSeleccionado);
        }
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
    }

    private async Task ActualizarResultado()
    {
        try
        {
            // Crear un diccionario con los valores actualizados
            var resultadoActualizado = new Dictionary<string, object>
            {
                { "id", idActual },
                { "resultado", resultadoEditar },
                { "fechacalculo", fechaCalculoEditar },
                { "fkidindicador", idIndicadorEditar }
            };

            // Actualizar el resultado usando el ID
            var actualizado = await servicioEntidad.ActualizarAsync(
            "proyecto", 
            "resultadoindicador", 
            "id",  // Columna clave
            idActual.ToString(),  // Valor clave - This was missing
            resultadoActualizado);

            if (actualizado)
            {
                await CargarRelaciones();
                CerrarModalEditar();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar resultado: {ex.Message}");
        }
    }

    private void EliminarResultado(Dictionary<string, object> resultado)
    {
        resultadoAEliminar = resultado;
        mostrarModalEliminar = true;
    }

    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        resultadoAEliminar = null;
    }

    private async Task ConfirmarEliminarResultado()
    {
        if (resultadoAEliminar != null)
        {
            var id = ObtenerValor(resultadoAEliminar, "id");

            try
            {
                var resultado = await servicioEntidad.EliminarAsync(
                    "proyecto",
                    "resultadoindicador",
                    "id",  // Eliminar por ID, no por fkidindicador
                    id);

                if (resultado)
                {
                    await CargarRelaciones();
                    CerrarModalEliminar();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar resultado: {ex.Message}");
            }
        }
    }

    private void MostrarModalEliminarMultiples()
    {
        if (resultadosSeleccionados.Any(r => r.Value))
        {
            mostrarModalEliminarMultiples = true;
        }
    }

    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
    }

    private async Task ConfirmarEliminarSeleccionados()
    {
        var resultadosParaEliminar = resultadosSeleccionados
            .Where(r => r.Value)
            .Select(r => r.Key)
            .ToList();

        bool todosEliminados = true;

        foreach (var resultado in resultadosParaEliminar)
        {
            var id = ObtenerValor(resultado, "id");

            var res = await servicioEntidad.EliminarAsync(
                "proyecto",
                "resultadoindicador",
                "id",  // Eliminar por ID, no por fkidindicador
                id);

            if (!res)
            {
                todosEliminados = false;
            }
        }

        if (todosEliminados)
        {
            await CargarRelaciones();
            CerrarModalEliminarMultiples();
        }
    }
}