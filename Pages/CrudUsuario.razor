@page "/usuarios"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Usuarios</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                        <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                            <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                        </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="() => EditarUsuarioSeleccionado()">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionado</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (usuarios == null || usuarios.Count == 0)
            {
                <p>No hay usuarios disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>Email</th>
                            <th>Contraseña</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var usuario in usuarios)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@usuarioSeleccionado[usuario]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(usuario, "email")</td>
                                <td>@ObtenerValor(usuario, "password")</td>
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarUsuario(usuario)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#" class="delete" @onclick="() => EliminarUsuario(usuario)" @onclick:preventDefault>
                                        <i class="material-icons" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar Usuario</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" class="form-control" @bind="emailUsuario" required>
                        </div>
                        <div class="form-group">
                            <label>Contraseña</label>
                            <input type="text" class="form-control" @bind="passwordUsuario" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Usuario</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Email del Usuario</label>
                        <input type="email" class="form-control" @bind="emailUsuarioConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarUsuario">Buscar</button>

                    @if (usuarioConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Email</label>
                            <input type="text" class="form-control" value="@emailUsuarioConsulta" disabled>
                        </div>
                        <div class="form-group">
                            <label>Contraseña</label>
                            <input type="text" class="form-control" value="@passwordUsuarioConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Usuario</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" class="form-control" @bind="emailUsuarioEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Contraseña</label>
                            <input type="text" class="form-control" @bind="passwordUsuarioEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Usuario</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar este usuario?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Usuarios Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar los usuarios seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private List<Dictionary<string, object>> usuarios = new();
    private Dictionary<Dictionary<string, object>, bool> usuarioSeleccionado = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in usuarioSeleccionado.Keys.ToList())
            {
                usuarioSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }

    private bool _seleccionarTodos = false;
    private bool mostrarModal = false;
    private bool mostrarModalConsulta = false;
    private bool mostrarModalEditar = false;
    private bool mostrarModalEliminar = false;
    private bool mostrarModalEliminarMultiples = false;

    private string emailUsuario = "";
    private string passwordUsuario = "";

    private string emailUsuarioConsulta = "";
    private string passwordUsuarioConsulta = "";
    private Dictionary<string, object>? usuarioConsultado = null;

    private string emailUsuarioEditar = "";
    private string passwordUsuarioEditar = "";
    private Dictionary<string, object>? usuarioParaEditar = null;

    private Dictionary<string, object>? usuarioParaEliminar = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "usuario");
            usuarios = resultado ?? new();
            usuarioSeleccionado = usuarios.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar usuarios: {ex.Message}";
            usuarios = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private void AbrirModal()
    {
        mostrarModal = true;
        emailUsuario = "";
        passwordUsuario = "";
        StateHasChanged();
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        StateHasChanged();
    }

    private async Task GuardarUsuario()
    {
        if (string.IsNullOrEmpty(emailUsuario) || string.IsNullOrEmpty(passwordUsuario))
        {
            errorMensaje = "El email y la contraseña del usuario son obligatorios.";
            return;
        }

        var nuevoUsuario = new Dictionary<string, object>
        { 
            { "email", emailUsuario },
            { "password", passwordUsuario }
        };

        bool resultado = await servicioEntidad.CrearAsync("proyecto", "usuario", nuevoUsuario);

        if (resultado)
        {
            usuarios.Add(nuevoUsuario);
            usuarioSeleccionado[nuevoUsuario] = false;
            CerrarModal();
        }
        else
        {
            errorMensaje = "Error al guardar el usuario en la base de datos.";
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }

    private void EditarUsuario(Dictionary<string, object> usuario)
    {
        usuarioParaEditar = usuario;
        emailUsuarioEditar = ObtenerValor(usuario, "email");
        passwordUsuarioEditar = ObtenerValor(usuario, "password");
        mostrarModalEditar = true;
        StateHasChanged();
    }

private async Task ActualizarUsuario()
{
    // Verificación de datos de entrada
    if (usuarioParaEditar == null || string.IsNullOrEmpty(emailUsuarioEditar) || string.IsNullOrEmpty(passwordUsuarioEditar))
    {
        errorMensaje = "El email y la contraseña del usuario son obligatorios.";
        return;
    }

    // Eliminar el campo 'email' del diccionario para evitar actualizar una columna única
    usuarioParaEditar.Remove("email");

    // Actualizar solo los campos permitidos: 'email' y 'password'
    usuarioParaEditar["email"] = emailUsuarioEditar;
    usuarioParaEditar["password"] = passwordUsuarioEditar;

    // Llamada al servicio de actualización
    bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto",              // Nombre del proyecto
        "usuario",               // Nombre de la entidad en la base de datos
        "email",                 // El campo clave primaria (en este caso, el email)
        emailUsuarioEditar,      // Email del usuario que estamos actualizando
        usuarioParaEditar        // Diccionario con los campos a actualizar
    );

    // Verificar si la actualización fue exitosa
    if (resultado)
    {
        // Actualización exitosa, cerrar el modal de edición
        CerrarModalEditar();
    }
    else
    {
        // En caso de error
        errorMensaje = "Error al actualizar el usuario en la base de datos.";
    }
}


    private void EditarUsuarioSeleccionado()
    {
        var seleccionado = usuarioSeleccionado.FirstOrDefault(x => x.Value).Key;
        if (seleccionado != null)
        {
            EditarUsuario(seleccionado);
        }
        else
        {
            errorMensaje = "Debe seleccionar un usuario para editar.";
        }
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
        StateHasChanged();
    }

    private async Task ConsultarUsuario()
    {
        if (string.IsNullOrEmpty(emailUsuarioConsulta))
        {
            errorMensaje = "Debe ingresar un email de usuario.";
            return;
        }

        var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "usuario", "email", emailUsuarioConsulta);

        if (resultado != null)
        {
            usuarioConsultado = resultado;
            emailUsuarioConsulta = ObtenerValor(resultado, "email");
            passwordUsuarioConsulta = ObtenerValor(resultado, "password");
        }
        else
        {
            errorMensaje = "No se encontró el usuario.";
            usuarioConsultado = null;
            emailUsuarioConsulta = "";
            passwordUsuarioConsulta = "";
        }
    }

    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        emailUsuarioConsulta = "";
        usuarioConsultado = null;
        passwordUsuarioConsulta = "";
        StateHasChanged();
    }

    private void MostrarModalEliminar(Dictionary<string, object> usuario)
    {
        usuarioParaEliminar = usuario;
        mostrarModalEliminar = true;
        StateHasChanged();
    }

    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        usuarioParaEliminar = null;
        StateHasChanged();
    }

    private async Task ConfirmarEliminarUsuario()
    {
        if (usuarioParaEliminar != null)
        {
            string email = ObtenerValor(usuarioParaEliminar, "email");

            bool resultado = await servicioEntidad.EliminarAsync("proyecto", "usuario", "email", email);

            if (resultado)
            {
                usuarios.Remove(usuarioParaEliminar);
                usuarioSeleccionado.Remove(usuarioParaEliminar);
            }
            else
            {
                errorMensaje = "Error al eliminar el usuario.";
            }

            CerrarModalEliminar();
        }
    }

    private async Task EliminarUsuario(Dictionary<string, object> usuario)
    {
        MostrarModalEliminar(usuario);
    }

    private void MostrarModalEliminarMultiples()
    {
        var haySeleccionados = usuarioSeleccionado.Any(x => x.Value);
        if (!haySeleccionados)
        {
            errorMensaje = "Debe seleccionar al menos un usuario para eliminar.";
            return;
        }

        mostrarModalEliminarMultiples = true;
        StateHasChanged();
    }

    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
        StateHasChanged();
    }

    private async Task ConfirmarEliminarSeleccionados()
    {
        var seleccionados = usuarioSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();

        foreach (var usuario in seleccionados)
        {
            string email = ObtenerValor(usuario, "email");
            bool resultado = await servicioEntidad.EliminarAsync("proyecto", "usuario", "email", email);

            if (resultado)
            {
                usuarios.Remove(usuario);
                usuarioSeleccionado.Remove(usuario);
            }
        }

        seleccionarTodos = false;
        CerrarModalEliminarMultiples();
    }
}

