@page "/variablesporindicador"
@using System.Collections.Generic
@using System.Threading.Tasks
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<PageTitle>Relación Variables por Indicador</PageTitle>

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Variables por Indicador</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                        <button class="btn btn-danger btn-sm" @onclick="EliminarSeleccionadas">
                            <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                        </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModalCrearRelacion">
                            <i class="material-icons">&#xE147;</i> <span>Agregar Nueva Relación</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (relaciones == null || relaciones.Count == 0)
            {
                <p>No hay relaciones disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodas">
                                    <label></label>
                                </span>
                            </th>
                            <th>Id Variable</th>
                            <th>Id Indicador</th>
                            <th>Email Usuario</th>
                            <th>Dato</th>
                            <th>Fecha</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var relacion in relaciones)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@relacionSeleccionada[relacion]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(relacion, "fkidvariable")</td>
                                <td>@ObtenerValor(relacion, "fkidindicador")</td>
                                <td>@ObtenerValor(relacion, "fkemailusuario")</td>
                                <td>@ObtenerValor(relacion, "dato")</td>
                                <td>@ObtenerValor(relacion, "fechadato")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Relación</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Id Indicador</label>
                        <input type="number" class="form-control" @bind="idIndicadorConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarRelacion">Buscar</button>

                    @if (relacionesConsultadas != null && relacionesConsultadas.Count > 0)
                    {
                        <hr />
                        <h5>Variables Asociadas</h5>
                        <ul class="list-group">
                            @foreach (var r in relacionesConsultadas)
                            {
                                <li class="list-group-item">
                                    Variable ID: @ObtenerValor(r, "fkidvariable"),
                                    Dato: @ObtenerValor(r, "dato"),
                                    Fecha: @ObtenerValor(r, "fechadato")
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalCrear)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarRelacion">
                    <div class="modal-header">
                        <h4 class="modal-title">Nueva Relación</h4>
                        <button type="button" class="close" @onclick="CerrarModalCrear">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Indicador</label>
                            <select class="form-control" @bind="idIndicador">
                                <option value="0">Seleccione un indicador</option>
                                @foreach (var i in indicadores)
                                {
                                    <option value="@ObtenerValor(i, "id")">@ObtenerValor(i, "nombre")</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Variable</label>
                            <select class="form-control" @bind="idVariable">
                                <option value="0">Seleccione una variable</option>
                                @foreach (var v in variables)
                                {
                                    <option value="@ObtenerValor(v, "id")">@ObtenerValor(v, "nombre")</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Email Usuario</label>
                            <select class="form-control" @bind="emailUsuario">
                                <option value="">Seleccione un usuario</option>
                                @foreach (var u in usuarios)
                                {
                                    <option value="@ObtenerValor(u, "email")">@ObtenerValor(u, "email")</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Dato</label>
                            <input type="number" class="form-control" @bind="dato" step="any">
                        </div>

                        <div class="form-group">
                            <label>Fecha</label>
                            <input type="datetime-local" class="form-control" @bind="fechaDato">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success">Guardar Relación</button>
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalCrear">Cancelar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private List<Dictionary<string, object>> relaciones = new();
    private Dictionary<Dictionary<string, object>, bool> relacionSeleccionada = new();
    private List<Dictionary<string, object>> indicadores = new();
    private List<Dictionary<string, object>> variables = new();
    private List<Dictionary<string, object>> usuarios = new();
    private List<Dictionary<string, object>> relacionesConsultadas = new();

    private bool cargando = true;
    private bool mostrarModalConsulta = false;
    private bool mostrarModalCrear = false;

    private bool seleccionarTodas
    {
        get => _seleccionarTodas;
        set
        {
            _seleccionarTodas = value;
            foreach (var clave in relacionSeleccionada.Keys.ToList())
            {
                relacionSeleccionada[clave] = _seleccionarTodas;
            }
        }
    }
    private bool _seleccionarTodas = false;

    private int idIndicador;
    private int idVariable;
    private string emailUsuario;
    private float dato;
    private DateTime fechaDato;
    private int idIndicadorConsulta;

    protected override async Task OnInitializedAsync()
    {
        await CargarRelaciones();
        await CargarIndicadores();
        await CargarVariables();
        await CargarUsuarios();
    }

    private async Task CargarRelaciones()
    {
        cargando = true;

        try
        {
            relaciones = await servicioEntidad.ObtenerTodosAsync("proyecto", "variablesporindicador") ?? new();
            relacionSeleccionada = relaciones.ToDictionary(r => r, r => false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar relaciones: {ex.Message}");
            relaciones = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarIndicadores()
    {
        indicadores = await servicioEntidad.ObtenerTodosAsync("proyecto", "indicador") ?? new();
    }

    private async Task CargarVariables()
    {
        variables = await servicioEntidad.ObtenerTodosAsync("proyecto", "variable") ?? new();
    }

    private async Task CargarUsuarios()
    {
        usuarios = await servicioEntidad.ObtenerTodosAsync("proyecto", "usuario") ?? new();
    }

    private void EliminarSeleccionadas()
    {
        var seleccionadas = relacionSeleccionada.Where(x => x.Value).Select(x => x.Key).ToList();
        foreach (var r in seleccionadas)
        {
            relaciones.Remove(r);
            relacionSeleccionada.Remove(r);
        }
        seleccionarTodas = false;
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }

    private void AbrirModalCrearRelacion()
    {
        mostrarModalCrear = true;
        idIndicador = 0;
        idVariable = 0;
        emailUsuario = "";
        dato = 0;
        fechaDato = DateTime.Now;
    }

    private void CerrarModalCrear()
    {
        mostrarModalCrear = false;
        idIndicador = 0;
        idVariable = 0;
        emailUsuario = "";
        dato = 0;
        fechaDato = DateTime.Now;
    }

    private async Task GuardarRelacion()
    {
        try
        {
            var parametros = new Dictionary<string, object>
            {
                { "fkidindicador", idIndicador },
                { "fkidvariable", idVariable },
                { "fkemailusuario", emailUsuario },
                { "dato", dato },
                { "fechadato", fechaDato }
            };

            var resultado = await servicioEntidad.InsertarAsync("proyecto", "variablesporindicador", parametros);

            if (resultado != null)
            {
                await CargarRelaciones();
                CerrarModalCrear();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar la relación: {ex.Message}");
        }
    }

    private async Task ConsultarRelacion()
    {
        relacionesConsultadas = await servicioEntidad.ObtenerTodosAsync("proyecto", $"variablesporindicador/fkidindicador/{idIndicadorConsulta}") ?? new();
    }

    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        idIndicadorConsulta = 0;
        relacionesConsultadas.Clear();
    }
}
