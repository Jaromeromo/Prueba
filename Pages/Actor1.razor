@page "/Actor1"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Actor</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                        <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                            <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                        </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModalGuardar">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="() => EditarUsuarioSeleccionado()">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionado</span>
                        </button>
                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (actores == null || actores.Count == 0)
            {
                <p>No hay Actores disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>Id</th>
                            <th>Nombre</th>
                            <th>Tipo Actor</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var actor in actores)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@actoresSeleccionado[actor]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(actor, "id")</td>
                                <td>@ObtenerValor(actor, "nombre")</td>
                                <td>@BuscarNombreTipoActor(actor)</td>
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarActor(actor)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#" class="delete" @onclick="() => EliminarActor(actor)"
                                        @onclick:preventDefault>
                                        <i class="material-icons" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModalGuardar)
{
   <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <form @onsubmit="GuardarActor">
                <div class="modal-header">
                    <h4 class="modal-title">Agregar Actor</h4>
                    <button type="button" class="close" @onclick="CerrarModalGuardar">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>id</label>
                        <input type="text" class="form-control" @bind="idActor" required>
                    </div>
                    <div class="form-group">
                        <label>Nombre Actor</label>
                        <input type="text" class="form-control" @bind="nombreActor" required>
                    </div>
                    <div class="form-group">
                        <label>Tipo de Actor</label>
                        <select class="form-control" @bind="fkidtipoactor">
                            <option value="0"selected>Seleccione un tipo de actor</option>
                            @foreach (var tipo in tipo_actores)
                            {
                                <option value="@ObtenerValor(tipo, "id")">@ObtenerValor(tipo, "nombre")</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalGuardar">Cancelar</button>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>

}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Usuario</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Id</label>
                        <input type="text" class="form-control" @bind="idActorConsultar">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarActor">Buscar</button>

                    @if (ActorConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Id</label>
                            <input type="text" class="form-control" value="@idActorConsultar" disabled>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" value="@nombreActorConsultar" disabled>
                        </div>
                        <div class="form-group">
                            <label>Tipo actor</label>
                            <input type="text" class="form-control" value="@BuscarNombreTipoActor(ActorConsultado)" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarActor">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Actor</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="text" class="form-control" @bind="idActorEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreActorEditar" required>
                        </div>
                        <div class="form-group">
                            <label>Tipo de Actor</label>
                            <select class="form-control" @bind="fkidtipoactorEditar">
                               
                                @foreach (var tipo in tipo_actores)
                                {
                                        <option value="@ObtenerValor(tipo, "id")">@ObtenerValor(tipo, "nombre")</option>                                  
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Actor</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar este Actor?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Actores Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar los Actores seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                            @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private List<Dictionary<string, object>> actores = new();
    private Dictionary<Dictionary<string, object>, bool> actoresSeleccionado = new();
    private List<Dictionary<string, object>> tipo_actores= new();
    private bool cargando = true;
    private string? errorMensaje = null;
    private bool _seleccionarTodos = false;
    private bool mostrarModalGuardar = false;
    private bool mostrarModalConsulta = false;
    private bool mostrarModalEditar = false;
    private bool mostrarModalEliminar = false;
    private bool mostrarModalEliminarMultiples = false;
    private string idActor = "";
    private string nombreActor = "";
    private string fkidtipoactor = "";
    private string idActorConsultar = "";
    private string nombreActorConsultar = "";
    private string fkidtipoactorConsultar = "";
    private Dictionary<string, object>? ActorConsultado = null;
    private string idActorEditar = "";
    private string nombreActorEditar = "";
    private string fkidtipoactorEditar = "";
    private Dictionary<string, object>? ActorParaEditar = null;
    private Dictionary<string, object>? ActorParaEliminar = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in actoresSeleccionado.Keys.ToList())
            {
                actoresSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }

    // ========== FUNCIONES QUE LLAMAN A LA API ==========

    protected override async Task OnInitializedAsync()
    {
        await CargarActor();
    }

    private async Task CargarActor()
    {
        cargando = true;
        errorMensaje = null;

        try
        {

           var repsueta_actores = await servicioEntidad.ObtenerTodosAsync("Proyecto","actor");
           var respuesta_tipoActores = await servicioEntidad.ObtenerTodosAsync("Proyecto","tipoactor");

            if(repsueta_actores == null){
                errorMensaje = "Error al cargar Actor";
                return;
            }else if(respuesta_tipoActores == null){
                errorMensaje = "Error al cargar tipo_actores";
                return;
            }
             actores = repsueta_actores;
             tipo_actores = respuesta_tipoActores;
             actoresSeleccionado = actores.ToDictionary(p => p, p => false);
   
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar Actor: {ex.Message}";
            actores = new();
        }
        finally
        {
            cargando = false;
        }

}
private async Task GuardarActor()
    {
        if (string.IsNullOrEmpty(idActor) || string.IsNullOrEmpty(nombreActor)||string.IsNullOrEmpty(fkidtipoactor))
        {
            errorMensaje = "El id,nombre y tipo_actor son obligatorios.";
            return;
        }

        var nuevoActor = new Dictionary<string, object>{
                      { "id", idActor },
                      { "nombre", nombreActor },
                      {"fkidtipoactor", fkidtipoactor}
        };

        bool resultado = await servicioEntidad.CrearAsync("proyecto", "actor", nuevoActor);

        if (resultado)
        {
            actores.Add(nuevoActor);
            actoresSeleccionado[nuevoActor] = false;
            await CargarActor();
            CerrarModalGuardar();
        }
        else
        {
            errorMensaje = "Error al guardar el Actor en la base de datos.";
        }
    }

    private async Task ActualizarActor()
    {
        if (ActorParaEditar == null || string.IsNullOrEmpty(idActorEditar) ||
        string.IsNullOrEmpty(nombreActorEditar) ||string.IsNullOrEmpty(fkidtipoactorEditar))
        {
            errorMensaje = "El id,nombre y tipo_actor son obligatorios.";
            return;
        }

        ActorParaEditar["id"] = idActorEditar;
        ActorParaEditar["nombre"] = nombreActorEditar;
        ActorParaEditar["fkidtipoactor"]=fkidtipoactorEditar;

        bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto",
        "actor",
        "id",
        idActorEditar,
        ActorParaEditar
        );

        if (resultado)
        {
            await CargarActor();
            CerrarModalEditar();
        }
        else
        {
            errorMensaje = "Error al actualizar el usuario en la base de datos.";
        }
    }

    private async Task ConsultarActor()
    {
        if (string.IsNullOrEmpty(idActorConsultar))
        {
            errorMensaje = "Debe ingresar un id de usuario.";
            return;
        }

        var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "actor", "id", idActorConsultar);

        if (resultado != null)
        {
            ActorConsultado = resultado;
            idActorConsultar = ObtenerValor(resultado, "id");
            nombreActorConsultar = ObtenerValor(resultado, "nombre");
            fkidtipoactorConsultar = ObtenerValor(resultado, "fkidtipoactor");
        }
        else
        {
            errorMensaje = "No se encontró el Actor.";
            idActorConsultar = null;
            nombreActorConsultar = "";
            fkidtipoactorConsultar = "";
        }
    }

    private async Task ConfirmarEliminarUsuario()
    {
        if (ActorParaEliminar != null)
        {
            string id = ObtenerValor(ActorParaEliminar, "id");

            bool resultado = await servicioEntidad.EliminarAsync("proyecto", "actor", "id", id);

            if (resultado)
            {
                actores.Remove(ActorParaEliminar);
                actoresSeleccionado.Remove(ActorParaEliminar);
            }
            else
            {
                errorMensaje = "Error al eliminar el usuario.";
            }

            CerrarModalEliminar();
        }
    }

    private async Task ConfirmarEliminarSeleccionados()
    {
        var seleccionados = actoresSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();

        foreach (var actor in seleccionados)
        {
            string id = ObtenerValor(actor, "id");
            bool resultado = await servicioEntidad.EliminarAsync("proyecto", "actor", "id", id);

            if (resultado)
            {
                actores.Remove(actor);
                actoresSeleccionado.Remove(actor);
            }
        }

        seleccionarTodos = false;
        CerrarModalEliminarMultiples();
    }

    // ========== FUNCIONES DE FRONT (NO LLAMAN A LA API) ==========

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }

    
string BuscarNombreTipoActor(Dictionary<string, object>? actor)
{
    if(actor == null){
        return "";
    }
    // Crear el diccionario de lookup: clave = id, valor = diccionario del tipo actor
    var lookup = tipo_actores.ToDictionary(
        item => ObtenerValor(item, "id"),
        item => item
    );

    if (actor.TryGetValue("fkidtipoactor", out var relacionado))
    {
        if (lookup.TryGetValue($"{relacionado}", out var tipo)) // clave como string
        {
            if (tipo.TryGetValue("nombre", out var nombre)) // se busca el nombre, no el id
            {
                return nombre?.ToString() ?? "";
            }
        }
    }

    return "";
}

    private void AbrirModalGuardar()
    {
        mostrarModalGuardar = true;
        idActor = "";
        nombreActor = "";
        fkidtipoactor = "0";
        StateHasChanged();
    }

    private void CerrarModalGuardar()
    {
        mostrarModalGuardar = false;
        StateHasChanged();
    }

    private void EditarActor(Dictionary<string, object> actor)
    {
        ActorParaEditar = actor;
        idActorEditar = ObtenerValor(actor, "id");
        nombreActorEditar = ObtenerValor(actor, "nombre");
        fkidtipoactorEditar = ObtenerValor(actor,"fkidtipoactor");
        mostrarModalEditar = true;
        StateHasChanged();
    }

    private void EditarUsuarioSeleccionado()
    {
        var seleccionado = actoresSeleccionado.FirstOrDefault(x => x.Value).Key;
        if (seleccionado != null)
        {
            EditarActor(seleccionado);
        }
        else
        {
            errorMensaje = "Debe seleccionar un usuario para editar.";
        }
    }

    private void CerrarModalEditar()
    {
        mostrarModalEditar = false;
        StateHasChanged();
    }

    private void CerrarModalConsulta()
    {
        mostrarModalConsulta = false;
        idActorConsultar = "";
        ActorConsultado = null;
        nombreActorConsultar = "";
        fkidtipoactorConsultar = "";
        StateHasChanged();
    }

    private void MostrarModalEliminar(Dictionary<string, object> actor)
    {
        ActorParaEliminar = actor;
        mostrarModalEliminar = true;
        StateHasChanged();
    }

    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        ActorParaEliminar = null;
        StateHasChanged();
    }

    private void EliminarActor(Dictionary<string, object> actor)
    {
        MostrarModalEliminar(actor);
    }

    private void MostrarModalEliminarMultiples()
    {
        var haySeleccionados = actoresSeleccionado.Any(x => x.Value);
        if (!haySeleccionados)
        {
            errorMensaje = "Debe seleccionar al menos un usuario para eliminar.";
            return;
        }

        mostrarModalEliminarMultiples = true;
        StateHasChanged();
    }

    private void CerrarModalEliminarMultiples()
    {
        mostrarModalEliminarMultiples = false;
        StateHasChanged();
    }
}